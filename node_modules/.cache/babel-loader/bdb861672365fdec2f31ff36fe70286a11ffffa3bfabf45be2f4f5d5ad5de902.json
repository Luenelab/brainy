{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js\";\nimport React from 'react';\nimport { Box, Text, Button, VStack } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorOverview = ({\n  themeColors\n}) => {\n  const colorEntries = Object.entries(themeColors);\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    width: \"100%\",\n    align: \"stretch\",\n    px: 4,\n    py: 8,\n    children: colorEntries.map(([colorName, colorValue]) => /*#__PURE__*/_jsxDEV(Box, {\n      p: 4,\n      bg: colorValue,\n      color: getTextColor(colorValue),\n      borderRadius: \"md\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          flex: \"1\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"lg\",\n            fontWeight: \"bold\",\n            color: getContrastColor(colorValue),\n            children: colorName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"sm\",\n            color: \"gray.600\",\n            children: colorValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          onClick: () => copyToClipboard(colorValue),\n          children: \"Copy Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this)\n    }, colorName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to determine text color based on background color brightness\n_c = ColorOverview;\nconst getTextColor = bgColor => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to determine contrast color for title\nconst getContrastColor = bgColor => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to convert hex color to RGB array\nconst hexToRgb = hex => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n// Function to copy color code to clipboard\nconst copyToClipboard = text => {\n  navigator.clipboard.writeText(text);\n};\nexport default ColorOverview;\nvar _c;\n$RefreshReg$(_c, \"ColorOverview\");","map":{"version":3,"names":["React","Box","Text","Button","VStack","jsxDEV","_jsxDEV","ColorOverview","themeColors","colorEntries","Object","entries","width","align","px","py","children","map","colorName","colorValue","p","bg","color","getTextColor","borderRadius","display","justifyContent","alignItems","flex","fontSize","fontWeight","getContrastColor","fileName","_jsxFileName","lineNumber","columnNumber","size","onClick","copyToClipboard","_c","bgColor","rgb","hexToRgb","brightness","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","text","navigator","clipboard","writeText","$RefreshReg$"],"sources":["/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js"],"sourcesContent":["import React from 'react';\nimport { Box, Text, Button, VStack } from '@chakra-ui/react';\n\nconst ColorOverview = ({ themeColors }) => {\n  const colorEntries = Object.entries(themeColors);\n\n  return (\n    <VStack width=\"100%\" align=\"stretch\" px={4} py={8}>\n      {colorEntries.map(([colorName, colorValue]) => (\n        <Box key={colorName} p={4} bg={colorValue} color={getTextColor(colorValue)} borderRadius=\"md\">\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Box flex=\"1\">\n              <Text fontSize=\"lg\" fontWeight=\"bold\" color={getContrastColor(colorValue)}>{colorName}</Text>\n              <Text fontSize=\"sm\" color=\"gray.600\">{colorValue}</Text>\n            </Box>\n            <Button size=\"sm\" onClick={() => copyToClipboard(colorValue)}>Copy Code</Button>\n          </Box>\n        </Box>\n      ))}\n    </VStack>\n  );\n};\n\n// Function to determine text color based on background color brightness\nconst getTextColor = (bgColor) => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to determine contrast color for title\nconst getContrastColor = (bgColor) => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to convert hex color to RGB array\nconst hexToRgb = (hex) => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n// Function to copy color code to clipboard\nconst copyToClipboard = (text) => {\n  navigator.clipboard.writeText(text);\n};\n\nexport default ColorOverview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}