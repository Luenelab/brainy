{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js\";\nimport React from 'react';\nimport { Box, Text, Button, VStack } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorOverview = ({\n  themeColors\n}) => {\n  const colorCategories = Object.keys(themeColors);\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    width: \"100%\",\n    align: \"stretch\",\n    px: 4,\n    py: 8,\n    children: colorCategories.map(categoryName => /*#__PURE__*/_jsxDEV(Box, {\n      mb: 4,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"lg\",\n        fontWeight: \"bold\",\n        mb: 2,\n        color: \"brand.800\",\n        children: categoryName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VStack, {\n        width: \"100%\",\n        align: \"stretch\",\n        children: Object.entries(themeColors[categoryName]).map(([colorName, colorValue]) => /*#__PURE__*/_jsxDEV(ColorBox, {\n          colorName: colorName,\n          colorValue: colorValue\n        }, colorName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this)]\n    }, categoryName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = ColorOverview;\nconst ColorBox = ({\n  colorName,\n  colorValue\n}) => {\n  // Function to determine text color based on background color brightness\n  const getTextColor = bgColor => {\n    const rgb = hexToRgb(bgColor);\n    if (!rgb) return 'black'; // Default to black if unable to determine brightness\n    const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n    return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n  };\n\n  // Function to determine contrast color for title\n  const getContrastColor = bgColor => {\n    const rgb = hexToRgb(bgColor);\n    if (!rgb) return 'black'; // Default to black if unable to determine brightness\n    const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n    return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n  };\n\n  // Function to convert hex color to RGB array\n  const hexToRgb = hex => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n  };\n\n  // Function to copy color code to clipboard\n  const copyToClipboard = text => {\n    navigator.clipboard.writeText(text);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    mb: 2,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      w: \"30px\",\n      h: \"30px\",\n      mr: 2,\n      bg: colorValue,\n      borderRadius: \"md\",\n      border: \"1px solid #ccc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      color: \"brand.800\",\n      mr: 2,\n      children: colorName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      color: \"brand.800\",\n      children: colorValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      ml: 2,\n      size: \"sm\",\n      colorScheme: \"brand\",\n      onClick: () => copyToClipboard(colorValue),\n      children: \"Copy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ColorBox;\nexport default ColorOverview;\nvar _c, _c2;\n$RefreshReg$(_c, \"ColorOverview\");\n$RefreshReg$(_c2, \"ColorBox\");","map":{"version":3,"names":["React","Box","Text","Button","VStack","jsxDEV","_jsxDEV","ColorOverview","themeColors","colorCategories","Object","keys","width","align","px","py","children","map","categoryName","mb","fontSize","fontWeight","color","fileName","_jsxFileName","lineNumber","columnNumber","entries","colorName","colorValue","ColorBox","_c","getTextColor","bgColor","rgb","hexToRgb","brightness","getContrastColor","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","copyToClipboard","text","navigator","clipboard","writeText","display","alignItems","w","h","mr","bg","borderRadius","border","ml","size","colorScheme","onClick","_c2","$RefreshReg$"],"sources":["/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js"],"sourcesContent":["import React from 'react';\nimport { Box, Text, Button, VStack } from '@chakra-ui/react';\n\nconst ColorOverview = ({ themeColors }) => {\n  const colorCategories = Object.keys(themeColors);\n\n  return (\n    <VStack width=\"100%\" align=\"stretch\" px={4} py={8}>\n      {colorCategories.map((categoryName) => (\n        <Box key={categoryName} mb={4}>\n          <Text fontSize=\"lg\" fontWeight=\"bold\" mb={2} color=\"brand.800\">\n            {categoryName}\n          </Text>\n          <VStack width=\"100%\" align=\"stretch\">\n            {Object.entries(themeColors[categoryName]).map(([colorName, colorValue]) => (\n              <ColorBox key={colorName} colorName={colorName} colorValue={colorValue} />\n            ))}\n          </VStack>\n        </Box>\n      ))}\n    </VStack>\n  );\n};\n\nconst ColorBox = ({ colorName, colorValue }) => {\n  // Function to determine text color based on background color brightness\n  const getTextColor = (bgColor) => {\n    const rgb = hexToRgb(bgColor);\n    if (!rgb) return 'black'; // Default to black if unable to determine brightness\n    const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n    return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n  };\n\n  // Function to determine contrast color for title\n  const getContrastColor = (bgColor) => {\n    const rgb = hexToRgb(bgColor);\n    if (!rgb) return 'black'; // Default to black if unable to determine brightness\n    const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n    return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n  };\n\n  // Function to convert hex color to RGB array\n  const hexToRgb = (hex) => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n  };\n\n  // Function to copy color code to clipboard\n  const copyToClipboard = (text) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" mb={2}>\n      <Box w=\"30px\" h=\"30px\" mr={2} bg={colorValue} borderRadius=\"md\" border=\"1px solid #ccc\" />\n      <Text color=\"brand.800\" mr={2}>{colorName}</Text>\n      <Text color=\"brand.800\">{colorValue}</Text>\n      <Button ml={2} size=\"sm\" colorScheme=\"brand\" onClick={() => copyToClipboard(colorValue)}>\n        Copy\n      </Button>\n    </Box>\n  );\n};\n\nexport default ColorOverview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}