{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js\";\nimport React from 'react';\nimport { Box, Text, Button, VStack } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorOverview = ({\n  themeColors\n}) => {\n  const colorEntries = Object.entries(themeColors);\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    spacing: 4,\n    width: \"100%\",\n    align: \"stretch\",\n    px: 4,\n    children: colorEntries.map(([colorName, colorValue]) => /*#__PURE__*/_jsxDEV(Box, {\n      p: 4,\n      bg: colorValue,\n      color: isDarkColor(colorValue) ? 'white' : 'black',\n      borderRadius: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        flex: \"1\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"lg\",\n          fontWeight: \"bold\",\n          children: colorName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"sm\",\n          color: \"gray.500\",\n          children: colorValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        size: \"sm\",\n        onClick: () => copyToClipboard(colorValue),\n        children: \"Copy Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }, this)]\n    }, colorName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to check if color is dark\n_c = ColorOverview;\nconst isDarkColor = color => {\n  const rgb = hexToRgb(color);\n  if (!rgb) return false;\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128;\n};\n\n// Function to convert hex color to RGB array\nconst hexToRgb = hex => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n// Function to copy color code to clipboard\nconst copyToClipboard = text => {\n  navigator.clipboard.writeText(text);\n};\nexport default ColorOverview;\nvar _c;\n$RefreshReg$(_c, \"ColorOverview\");","map":{"version":3,"names":["React","Box","Text","Button","VStack","jsxDEV","_jsxDEV","ColorOverview","themeColors","colorEntries","Object","entries","spacing","width","align","px","children","map","colorName","colorValue","p","bg","color","isDarkColor","borderRadius","display","alignItems","justifyContent","flex","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","size","onClick","copyToClipboard","_c","rgb","hexToRgb","brightness","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","text","navigator","clipboard","writeText","$RefreshReg$"],"sources":["/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js"],"sourcesContent":["import React from 'react';\nimport { Box, Text, Button, VStack } from '@chakra-ui/react';\n\nconst ColorOverview = ({ themeColors }) => {\n  const colorEntries = Object.entries(themeColors);\n\n  return (\n    <VStack spacing={4} width=\"100%\" align=\"stretch\" px={4}>\n      {colorEntries.map(([colorName, colorValue]) => (\n        <Box key={colorName} p={4} bg={colorValue} color={isDarkColor(colorValue) ? 'white' : 'black'} borderRadius=\"none\" display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Box flex=\"1\">\n            <Text fontSize=\"lg\" fontWeight=\"bold\">{colorName}</Text>\n            <Text fontSize=\"sm\" color=\"gray.500\">{colorValue}</Text>\n          </Box>\n          <Button size=\"sm\" onClick={() => copyToClipboard(colorValue)}>Copy Code</Button>\n        </Box>\n      ))}\n    </VStack>\n  );\n};\n\n// Function to check if color is dark\nconst isDarkColor = (color) => {\n  const rgb = hexToRgb(color);\n  if (!rgb) return false;\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128;\n};\n\n// Function to convert hex color to RGB array\nconst hexToRgb = (hex) => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n// Function to copy color code to clipboard\nconst copyToClipboard = (text) => {\n  navigator.clipboard.writeText(text);\n};\n\nexport default ColorOverview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}