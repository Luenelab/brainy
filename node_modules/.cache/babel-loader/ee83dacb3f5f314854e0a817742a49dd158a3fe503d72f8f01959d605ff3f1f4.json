{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js\";\nimport React from 'react';\nimport { Box, Text, Button, VStack, Heading } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorOverview = ({\n  themeColors\n}) => {\n  const colorEntries = Object.entries(themeColors);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    maxW: \"500px\",\n    mx: \"auto\",\n    mt: 8,\n    p: 4,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      bg: \"brand.800\",\n      color: \"brand.50\",\n      borderRadius: \"md\",\n      p: 4,\n      boxShadow: \"md\",\n      mb: 6,\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h2\",\n        size: \"md\",\n        mb: 4,\n        children: \"Theme Colors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VStack, {\n        align: \"stretch\",\n        children: colorEntries.map(([colorName, colorValue]) => /*#__PURE__*/_jsxDEV(Box, {\n          p: 2,\n          bg: colorValue,\n          color: getTextColor(colorValue),\n          borderRadius: \"md\",\n          mb: 2,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              flex: \"1\",\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                fontSize: \"md\",\n                fontWeight: \"bold\",\n                color: getContrastColor(colorValue),\n                children: colorName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 16,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                fontSize: \"sm\",\n                color: \"gray.200\",\n                children: colorValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 17,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 15,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              onClick: () => copyToClipboard(colorValue),\n              children: \"Copy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 15\n          }, this)\n        }, colorName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to determine text color based on background color brightness\n_c = ColorOverview;\nconst getTextColor = bgColor => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to determine contrast color for title\nconst getContrastColor = bgColor => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to convert hex color to RGB array\nconst hexToRgb = hex => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n// Function to copy color code to clipboard\nconst copyToClipboard = text => {\n  navigator.clipboard.writeText(text);\n};\nexport default ColorOverview;\nvar _c;\n$RefreshReg$(_c, \"ColorOverview\");","map":{"version":3,"names":["React","Box","Text","Button","VStack","Heading","jsxDEV","_jsxDEV","ColorOverview","themeColors","colorEntries","Object","entries","maxW","mx","mt","p","children","bg","color","borderRadius","boxShadow","mb","as","size","fileName","_jsxFileName","lineNumber","columnNumber","align","map","colorName","colorValue","getTextColor","display","justifyContent","alignItems","flex","fontSize","fontWeight","getContrastColor","onClick","copyToClipboard","_c","bgColor","rgb","hexToRgb","brightness","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","text","navigator","clipboard","writeText","$RefreshReg$"],"sources":["/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js"],"sourcesContent":["import React from 'react';\nimport { Box, Text, Button, VStack, Heading } from '@chakra-ui/react';\n\nconst ColorOverview = ({ themeColors }) => {\n  const colorEntries = Object.entries(themeColors);\n\n  return (\n    <Box maxW=\"500px\" mx=\"auto\" mt={8} p={4}>\n      <Box bg=\"brand.800\" color=\"brand.50\" borderRadius=\"md\" p={4} boxShadow=\"md\" mb={6}>\n        <Heading as=\"h2\" size=\"md\" mb={4}>Theme Colors</Heading>\n        <VStack align=\"stretch\">\n          {colorEntries.map(([colorName, colorValue]) => (\n            <Box key={colorName} p={2} bg={colorValue} color={getTextColor(colorValue)} borderRadius=\"md\" mb={2}>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Box flex=\"1\">\n                  <Text fontSize=\"md\" fontWeight=\"bold\" color={getContrastColor(colorValue)}>{colorName}</Text>\n                  <Text fontSize=\"sm\" color=\"gray.200\">{colorValue}</Text>\n                </Box>\n                <Button size=\"sm\" onClick={() => copyToClipboard(colorValue)}>Copy</Button>\n              </Box>\n            </Box>\n          ))}\n        </VStack>\n      </Box>\n    </Box>\n  );\n};\n\n// Function to determine text color based on background color brightness\nconst getTextColor = (bgColor) => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to determine contrast color for title\nconst getContrastColor = (bgColor) => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to convert hex color to RGB array\nconst hexToRgb = (hex) => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n// Function to copy color code to clipboard\nconst copyToClipboard = (text) => {\n  navigator.clipboard.writeText(text);\n};\n\nexport default ColorOverview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}