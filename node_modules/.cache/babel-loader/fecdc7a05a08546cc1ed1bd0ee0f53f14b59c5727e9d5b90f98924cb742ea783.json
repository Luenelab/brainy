{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js\";\nimport React from 'react';\nimport { Box, Text } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorOverview = ({\n  themeColors\n}) => {\n  const allColors = {\n    ...themeColors\n  }; // Combine all color categories\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: Object.keys(allColors).map(colorCategory => /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"lg\",\n        fontWeight: \"bold\",\n        mb: 2,\n        color: \"brand.800\",\n        children: colorCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this), Object.keys(allColors[colorCategory]).map(colorName => /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          w: \"30px\",\n          h: \"30px\",\n          mr: 2,\n          bg: allColors[colorCategory][colorName],\n          borderRadius: \"md\",\n          border: \"1px solid #ccc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"brand.800\",\n          children: colorName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: 2,\n          color: \"brand.800\",\n          children: allColors[colorCategory][colorName]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this)]\n      }, colorName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this))]\n    }, colorCategory, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to determine text color based on background color brightness\n_c = ColorOverview;\nconst getTextColor = bgColor => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to determine contrast color for title\nconst getContrastColor = bgColor => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to convert hex color to RGB array\nconst hexToRgb = hex => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n// Function to copy color code to clipboard\nconst copyToClipboard = text => {\n  navigator.clipboard.writeText(text);\n};\nexport default ColorOverview;\nvar _c;\n$RefreshReg$(_c, \"ColorOverview\");","map":{"version":3,"names":["React","Box","Text","jsxDEV","_jsxDEV","ColorOverview","themeColors","allColors","children","Object","keys","map","colorCategory","fontSize","fontWeight","mb","color","fileName","_jsxFileName","lineNumber","columnNumber","colorName","display","alignItems","w","h","mr","bg","borderRadius","border","ml","_c","getTextColor","bgColor","rgb","hexToRgb","brightness","getContrastColor","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","copyToClipboard","text","navigator","clipboard","writeText","$RefreshReg$"],"sources":["/Users/raphaelhaus/Coding/chakra-todo/src/ColorOverview.js"],"sourcesContent":["import React from 'react';\nimport { Box, Text } from '@chakra-ui/react';\n\nconst ColorOverview = ({ themeColors }) => {\n  const allColors = { ...themeColors }; // Combine all color categories\n\n  return (\n    <Box>\n      {Object.keys(allColors).map((colorCategory) => (\n        <Box key={colorCategory}>\n          <Text fontSize=\"lg\" fontWeight=\"bold\" mb={2} color=\"brand.800\">\n            {colorCategory}\n          </Text>\n          {Object.keys(allColors[colorCategory]).map((colorName) => (\n            <Box key={colorName} display=\"flex\" alignItems=\"center\" mb={2}>\n              <Box w=\"30px\" h=\"30px\" mr={2} bg={allColors[colorCategory][colorName]} borderRadius=\"md\" border=\"1px solid #ccc\" />\n              <Text color=\"brand.800\">{colorName}</Text>\n              <Text ml={2} color=\"brand.800\">{allColors[colorCategory][colorName]}</Text>\n            </Box>\n          ))}\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\n// Function to determine text color based on background color brightness\nconst getTextColor = (bgColor) => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to determine contrast color for title\nconst getContrastColor = (bgColor) => {\n  const rgb = hexToRgb(bgColor);\n  if (!rgb) return 'black'; // Default to black if unable to determine brightness\n  const brightness = rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114;\n  return brightness < 128 ? 'white' : 'black'; // Use white text for dark backgrounds, black for light backgrounds\n};\n\n// Function to convert hex color to RGB array\nconst hexToRgb = (hex) => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n// Function to copy color code to clipboard\nconst copyToClipboard = (text) => {\n  navigator.clipboard.writeText(text);\n};\n\nexport default ColorOverview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}